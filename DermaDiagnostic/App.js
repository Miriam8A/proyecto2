import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  ScrollView,
  Alert,
  ActivityIndicator,
  SafeAreaView,
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from './config';

// Configuraci√≥n de la API de Gemini
const genAI = new GoogleGenerativeAI(config.GEMINI_API_KEY);

// Base de datos de recomendaciones
const diseaseRecommendations = {
  'acn√©': {
    description: 'Condici√≥n com√∫n de la piel caracterizada por poros obstruidos',
    medications: ['Per√≥xido de benzoilo', '√Åcido salic√≠lico', 'Tretino√≠na'],
    advice: 'Mant√©n la piel limpia, evita tocar las lesiones y usa productos no comedog√©nicos'
  },
  'herpes zoster': {
    description: 'Infecci√≥n viral que causa una erupci√≥n dolorosa',
    medications: ['Aciclovir', 'Valaciclovir', 'Famciclovir'],
    advice: 'Consulta inmediatamente con un m√©dico. El tratamiento temprano es crucial.'
  },
  'dermatitis': {
    description: 'Inflamaci√≥n de la piel que puede ser al√©rgica o de contacto',
    medications: ['Cremas con corticosteroides', 'Antihistam√≠nicos', 'Emolientes'],
    advice: 'Identifica y evita los desencadenantes, mant√©n la piel hidratada'
  },
  'psoriasis': {
    description: 'Enfermedad autoinmune que acelera el ciclo de vida de las c√©lulas de la piel',
    medications: ['Corticosteroides t√≥picos', 'An√°logos de vitamina D', 'Metotrexato'],
    advice: 'Evita el estr√©s, mant√©n la piel hidratada y considera tratamientos con luz UV'
  },
  'melanoma': {
    description: 'Tipo de c√°ncer de piel que se desarrolla en los melanocitos',
    medications: ['Requiere evaluaci√≥n m√©dica inmediata'],
    advice: '¬°URGENTE! Consulta inmediatamente con un dermat√≥logo onc√≥logo'
  },
  'eczema': {
    description: 'Condici√≥n que hace que la piel se inflame, pique y se enrojezca',
    medications: ['Cremas con corticosteroides', 'Inhibidores de calcineurina', 'Emolientes'],
    advice: 'Evita irritantes, usa jabones suaves y mant√©n la piel bien hidratada'
  }
};

export default function App() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [diagnosis, setDiagnosis] = useState(null);
  const [loading, setLoading] = useState(false);

  // Tomar foto con la c√°mara
  const takePhoto = async () => {
    try {
      // Solicitar permisos
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permiso denegado', 'Se necesita acceso a la c√°mara para tomar fotos');
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled) {
        setSelectedImage(result.assets[0].uri);
      }
    } catch (error) {
      Alert.alert('Error', 'No se pudo tomar la foto: ' + error.message);
    }
  };

  // Seleccionar imagen de la galer√≠a
  const pickImage = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled) {
        setSelectedImage(result.assets[0].uri);
      }
    } catch (error) {
      Alert.alert('Error', 'No se pudo seleccionar la imagen: ' + error.message);
    }
  };

  // Convertir imagen a base64
  const imageToBase64 = async (uri) => {
    try {
      const response = await fetch(uri);
      const blob = await response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(',')[1]);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    } catch (error) {
      throw new Error('Error al convertir imagen');
    }
  };

  // Analizar imagen con Gemini
  const analyzeImage = async () => {
    if (!selectedImage) {
      Alert.alert('Error', 'Por favor selecciona una imagen primero');
      return;
    }

    if (!config.GEMINI_API_KEY || config.GEMINI_API_KEY === 'TU_API_KEY_DE_GEMINI_AQUI') {
      Alert.alert('Error', 'Por favor configura tu API key de Gemini en config.js');
      return;
    }

    setLoading(true);
    try {
      const base64Image = await imageToBase64(selectedImage);
      
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      const prompt = `Analiza esta imagen de piel y proporciona un diagn√≥stico dermatol√≥gico.
      
      Instrucciones espec√≠ficas:
      1. Examina cuidadosamente la imagen en busca de lesiones, erupciones, cambios de color, textura o cualquier anomal√≠a visible
      2. Identifica la condici√≥n dermatol√≥gica m√°s probable bas√°ndose en las caracter√≠sticas visuales
      3. Responde √öNICAMENTE con el nombre de la condici√≥n en espa√±ol, en min√∫sculas
      4. Si detectas m√∫ltiples condiciones, menciona la m√°s prominente
      5. Condiciones comunes a considerar: acn√©, dermatitis, psoriasis, eczema, herpes zoster, melanoma, ros√°cea, vitiligo
      6. Si no puedes identificar claramente una condici√≥n, responde "condici√≥n no identificada"
      
      Importante: Tu respuesta debe ser solo el nombre de la condici√≥n dermatol√≥gica, sin explicaciones adicionales.`;

      const result = await model.generateContent([
        prompt,
        {
          inlineData: {
            mimeType: "image/jpeg",
            data: base64Image
          }
        }
      ]);

      const response = await result.response;
      const diagnosisText = response.text().toLowerCase().trim();
      
      // Buscar recomendaciones
      const recommendation = diseaseRecommendations[diagnosisText] || {
        description: 'Condici√≥n no identificada en nuestra base de datos',
        medications: ['Consulta con un dermat√≥logo'],
        advice: 'Se recomienda evaluaci√≥n m√©dica profesional para un diagn√≥stico preciso'
      };

      setDiagnosis({
        condition: diagnosisText,
        ...recommendation
      });

    } catch (error) {
      console.error('Error:', error);
      Alert.alert('Error', 'No se pudo analizar la imagen. Verifica tu conexi√≥n y API key.');
    } finally {
      setLoading(false);
    }
  };

  const resetApp = () => {
    setSelectedImage(null);
    setDiagnosis(null);
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <Text style={styles.title}>DermaDiagnostic</Text>
        <Text style={styles.subtitle}>Diagn√≥stico dermatol√≥gico con IA</Text>

        {!selectedImage ? (
          <View style={styles.imagePickerContainer}>
            <Text style={styles.instructionText}>
              Toma una foto o selecciona una imagen de la lesi√≥n cut√°nea para analizar
            </Text>
            
            <TouchableOpacity style={styles.button} onPress={takePhoto}>
              <Text style={styles.buttonText}>üì∑ Tomar Foto</Text>
            </TouchableOpacity>

            <TouchableOpacity style={[styles.button, styles.secondaryButton]} onPress={pickImage}>
              <Text style={styles.buttonText}>üñºÔ∏è Seleccionar de Galer√≠a</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.imageContainer}>
            <Image source={{ uri: selectedImage }} style={styles.selectedImage} />
            
            <View style={styles.buttonContainer}>
              <TouchableOpacity 
                style={[styles.button, loading && styles.disabledButton]} 
                onPress={analyzeImage}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator color="#fff" />
                ) : (
                  <Text style={styles.buttonText}>üîç Analizar Imagen</Text>
                )}
              </TouchableOpacity>

              <TouchableOpacity style={[styles.button, styles.secondaryButton]} onPress={resetApp}>
                <Text style={styles.buttonText}>üîÑ Nueva Imagen</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {diagnosis && (
          <View style={styles.diagnosisContainer}>
            <Text style={styles.diagnosisTitle}>Diagn√≥stico</Text>
            <Text style={styles.conditionText}>{diagnosis.condition.toUpperCase()}</Text>
            
            <Text style={styles.sectionTitle}>Descripci√≥n:</Text>
            <Text style={styles.descriptionText}>{diagnosis.description}</Text>

            <Text style={styles.sectionTitle}>Tratamientos recomendados:</Text>
            {diagnosis.medications.map((med, index) => (
              <Text key={index} style={styles.medicationText}>‚Ä¢ {med}</Text>
            ))}

            <Text style={styles.sectionTitle}>Consejos:</Text>
            <Text style={styles.adviceText}>{diagnosis.advice}</Text>

            <View style={styles.disclaimer}>
              <Text style={styles.disclaimerText}>
                ‚ö†Ô∏è IMPORTANTE: Este diagn√≥stico es orientativo. Siempre consulta con un dermat√≥logo profesional para un diagn√≥stico definitivo y tratamiento adecuado.
              </Text>
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContainer: {
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#2c3e50',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    color: '#7f8c8d',
    marginBottom: 30,
  },
  imagePickerContainer: {
    alignItems: 'center',
    marginBottom: 30,
  },
  instructionText: {
    fontSize: 16,
    textAlign: 'center',
    color: '#34495e',
    marginBottom: 30,
    lineHeight: 24,
  },
  button: {
    backgroundColor: '#3498db',
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 25,
    marginVertical: 10,
    minWidth: 200,
    alignItems: 'center',
  },
  secondaryButton: {
    backgroundColor: '#95a5a6',
  },
  disabledButton: {
    backgroundColor: '#bdc3c7',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  imageContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  selectedImage: {
    width: 300,
    height: 300,
    borderRadius: 15,
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
  },
  diagnosisContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  diagnosisTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    textAlign: 'center',
    marginBottom: 15,
  },
  conditionText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#e74c3c',
    textAlign: 'center',
    marginBottom: 20,
    backgroundColor: '#fdf2f2',
    padding: 10,
    borderRadius: 8,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginTop: 15,
    marginBottom: 8,
  },
  descriptionText: {
    fontSize: 16,
    color: '#34495e',
    lineHeight: 22,
    marginBottom: 10,
  },
  medicationText: {
    fontSize: 16,
    color: '#27ae60',
    marginVertical: 2,
    fontWeight: '500',
  },
  adviceText: {
    fontSize: 16,
    color: '#34495e',
    lineHeight: 22,
    fontStyle: 'italic',
  },
  disclaimer: {
    backgroundColor: '#fff3cd',
    padding: 15,
    borderRadius: 8,
    marginTop: 20,
    borderLeftWidth: 4,
    borderLeftColor: '#ffc107',
  },
  disclaimerText: {
    fontSize: 14,
    color: '#856404',
    textAlign: 'center',
    fontWeight: '500',
  },
});